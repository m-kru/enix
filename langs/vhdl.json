[
	{
		"Name": "Default",
		"Attribute": {
			"Regex": "\\w+",
			"PositiveLookBehind": "'",
			"PositiveLookAhead": "\\b"
		},
		"Keyword": {
			"Regex": "\\b(abs|access|after|alias|all|and|architecture|array|assert|assume|attribute|begin|block|body|buffer|bus|case|component|configuration|constant|context|cover|default|disconnect|downto|else|elsif|end|entity|exit|fairness|file|for|force|function|generate|generic|group|guarded|if|impure|in|inertial|inout|is|label|library|linkage|literal|loop|map|mod|nand|new|next|nor|not|null|of|on|open|or|others|out|package|parameter|port|postponed|procedure|process|property|protected|private|pure|range|record|register|reject|release|rem|report|restrict|return|rol|ror|select|sequence|severity|signal|shared|sla|sll|sra|srl|strong|subtype|then|to|transport|type|unaffected|units|until|use|variable|view|vpkg|vmode|vprop|vunit|wait|when|while|with|xnor|xor)\\b"
		},
		"Meta": {
			"Regex": "(?i)\\b('[U|X|W|-]')\\b"
		},
		"Number": {
			"Regex": "\\b((2#[01_]+#)([eE]-?\\d+)?|(8#[0-7_]+#)([eE]-?\\d+)?|(16#[0-9a-fA-F_]+#)([eE]-?\\d+)?|([\\d_]+(\\.[\\d_]+)?([eE]-?\\d+)?))"
		},
		"Operator": {
			"Regex": "\\?|=|:=|<|>|\\+|-|/|&|\\*"
		},
		"Type": {
			"Regex": "\\b(bit|bit_vector|boolean|boolean_vector|character|file_open_state|file_origin_kind|integer|integer_vector|natural|positive|line|line_vector|real|real_vector|std_logic|std_logic_vector|std_ulogic|std_ulogic_vector|side|signed|string|text|time|time_vector|unsigned)\\b"
		},
		"Value": {
			"Regex": "(?i)\\b(true|false|note|warning|error|failure|nul)\\b"
		}
	},
	{
		"Name": "Block Comment",
		"Style": "Comment",
		"Start": {
			"Regex": "/\\*"
		},
		"End": {
			"Regex": "\\*/"
		},
		"Bold": {
			"Regex": "(?i)(todo|note|xxx):"
		}

	},
	{
		"Name": "Line Comment",
		"Style": "Comment",
		"Start": {
			"Regex": "--"
		},
		"End": {
			"Regex": "$"
		},
		"Bold": {
			"Regex": "(?i)(todo|note|xxx):"
		}
	},
	{
		"Name": "Logic Value",
		"Style": "Value",
		"Start": {
			"Regex": "'",
			"PositiveLookBehind": "\\s|,|=|<|>|\\("
		},
		"End": {
			"Regex": "'"
		}
	},
	{
		"Name": "Bit String",
		"Style": "Value",
		"Start": {
			"Regex": "(b|B|o|O|x|X)\""
		},
		"End": {
			"Regex": "\""
		}
	},
	{
		"Name": "String",
		"Style": "String",
		"Start": {
			"Regex": "\""
		},
		"End": {
			"Regex": "\""
		}
	}
]
